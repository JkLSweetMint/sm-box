// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: src/transport/proto/src/notifications/users_notifications-service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserNotificationsServiceClient is the client API for UserNotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserNotificationsServiceClient interface {
	Create(ctx context.Context, in *UserNotificationsCreateRequest, opts ...grpc.CallOption) (*UserNotificationsCreateResponse, error)
	CreateOne(ctx context.Context, in *UserNotificationsCreateOneRequest, opts ...grpc.CallOption) (*UserNotificationsCreateOneResponse, error)
}

type userNotificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserNotificationsServiceClient(cc grpc.ClientConnInterface) UserNotificationsServiceClient {
	return &userNotificationsServiceClient{cc}
}

func (c *userNotificationsServiceClient) Create(ctx context.Context, in *UserNotificationsCreateRequest, opts ...grpc.CallOption) (*UserNotificationsCreateResponse, error) {
	out := new(UserNotificationsCreateResponse)
	err := c.cc.Invoke(ctx, "/grpc_service.UserNotificationsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNotificationsServiceClient) CreateOne(ctx context.Context, in *UserNotificationsCreateOneRequest, opts ...grpc.CallOption) (*UserNotificationsCreateOneResponse, error) {
	out := new(UserNotificationsCreateOneResponse)
	err := c.cc.Invoke(ctx, "/grpc_service.UserNotificationsService/CreateOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserNotificationsServiceServer is the server API for UserNotificationsService service.
// All implementations must embed UnimplementedUserNotificationsServiceServer
// for forward compatibility
type UserNotificationsServiceServer interface {
	Create(context.Context, *UserNotificationsCreateRequest) (*UserNotificationsCreateResponse, error)
	CreateOne(context.Context, *UserNotificationsCreateOneRequest) (*UserNotificationsCreateOneResponse, error)
	mustEmbedUnimplementedUserNotificationsServiceServer()
}

// UnimplementedUserNotificationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserNotificationsServiceServer struct {
}

func (UnimplementedUserNotificationsServiceServer) Create(context.Context, *UserNotificationsCreateRequest) (*UserNotificationsCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserNotificationsServiceServer) CreateOne(context.Context, *UserNotificationsCreateOneRequest) (*UserNotificationsCreateOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOne not implemented")
}
func (UnimplementedUserNotificationsServiceServer) mustEmbedUnimplementedUserNotificationsServiceServer() {
}

// UnsafeUserNotificationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserNotificationsServiceServer will
// result in compilation errors.
type UnsafeUserNotificationsServiceServer interface {
	mustEmbedUnimplementedUserNotificationsServiceServer()
}

func RegisterUserNotificationsServiceServer(s grpc.ServiceRegistrar, srv UserNotificationsServiceServer) {
	s.RegisterService(&UserNotificationsService_ServiceDesc, srv)
}

func _UserNotificationsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNotificationsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNotificationsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_service.UserNotificationsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNotificationsServiceServer).Create(ctx, req.(*UserNotificationsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNotificationsService_CreateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNotificationsCreateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNotificationsServiceServer).CreateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_service.UserNotificationsService/CreateOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNotificationsServiceServer).CreateOne(ctx, req.(*UserNotificationsCreateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserNotificationsService_ServiceDesc is the grpc.ServiceDesc for UserNotificationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserNotificationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.UserNotificationsService",
	HandlerType: (*UserNotificationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserNotificationsService_Create_Handler,
		},
		{
			MethodName: "CreateOne",
			Handler:    _UserNotificationsService_CreateOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/transport/proto/src/notifications/users_notifications-service.proto",
}
