// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: src/transport/proto/src/users-service/access_system-service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessSystemClient is the client API for AccessSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessSystemClient interface {
	CheckUserAccess(ctx context.Context, in *AccessSystemCheckUserAccessRequest, opts ...grpc.CallOption) (*AccessSystemCheckUserAccessResponse, error)
}

type accessSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessSystemClient(cc grpc.ClientConnInterface) AccessSystemClient {
	return &accessSystemClient{cc}
}

func (c *accessSystemClient) CheckUserAccess(ctx context.Context, in *AccessSystemCheckUserAccessRequest, opts ...grpc.CallOption) (*AccessSystemCheckUserAccessResponse, error) {
	out := new(AccessSystemCheckUserAccessResponse)
	err := c.cc.Invoke(ctx, "/grpc_service.AccessSystem/CheckUserAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessSystemServer is the server API for AccessSystem service.
// All implementations must embed UnimplementedAccessSystemServer
// for forward compatibility
type AccessSystemServer interface {
	CheckUserAccess(context.Context, *AccessSystemCheckUserAccessRequest) (*AccessSystemCheckUserAccessResponse, error)
	mustEmbedUnimplementedAccessSystemServer()
}

// UnimplementedAccessSystemServer must be embedded to have forward compatible implementations.
type UnimplementedAccessSystemServer struct {
}

func (UnimplementedAccessSystemServer) CheckUserAccess(context.Context, *AccessSystemCheckUserAccessRequest) (*AccessSystemCheckUserAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAccess not implemented")
}
func (UnimplementedAccessSystemServer) mustEmbedUnimplementedAccessSystemServer() {}

// UnsafeAccessSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessSystemServer will
// result in compilation errors.
type UnsafeAccessSystemServer interface {
	mustEmbedUnimplementedAccessSystemServer()
}

func RegisterAccessSystemServer(s grpc.ServiceRegistrar, srv AccessSystemServer) {
	s.RegisterService(&AccessSystem_ServiceDesc, srv)
}

func _AccessSystem_CheckUserAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessSystemCheckUserAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessSystemServer).CheckUserAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_service.AccessSystem/CheckUserAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessSystemServer).CheckUserAccess(ctx, req.(*AccessSystemCheckUserAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessSystem_ServiceDesc is the grpc.ServiceDesc for AccessSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.AccessSystem",
	HandlerType: (*AccessSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserAccess",
			Handler:    _AccessSystem_CheckUserAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/transport/proto/src/users-service/access_system-service.proto",
}
